<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PullApprove Docs</title>
    <link>http://docs.pullapprove.com/</link>
    <description>Recent content on PullApprove Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 04 Apr 2016 19:59:38 -0600</lastBuildDate>
    <atom:link href="http://docs.pullapprove.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Daily update emails</title>
      <link>http://docs.pullapprove.com/daily-update-emails/</link>
      <pubDate>Mon, 04 Apr 2016 19:59:38 -0600</pubDate>
      
      <guid>http://docs.pullapprove.com/daily-update-emails/</guid>
      <description>

&lt;h2 id=&#34;daily-update-emails:c4cc9df228d1ebe8c03efe0d46cc7674&#34;&gt;Daily update emails&lt;/h2&gt;

&lt;p&gt;Sometimes it can be hard to keep code reviews moving forward. To help deal with that, PullApprove can send you (and your reviewers) a daily update every morning listing the open PR&amp;rsquo;s waiting for your review, as well as the PR&amp;rsquo;s that you have opened that still need to be finished.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://pullapprove.com/settings/?daily_digest_email_enabled=true&#34;&gt;Enable daily update emails for your account &lt;span class=&#34;fa fa-arrow-right&#34;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;http://docs.pullapprove.com/img/daily-update-email-example.png&#34; alt=&#34;Daily update email example&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>extends</title>
      <link>http://docs.pullapprove.com/yaml/extends/</link>
      <pubDate>Thu, 04 Feb 2016 20:19:35 -0600</pubDate>
      
      <guid>http://docs.pullapprove.com/yaml/extends/</guid>
      <description>

&lt;p&gt;Extend a &lt;a href=&#34;http://docs.pullapprove.com/yaml-templates&#34;&gt;YAML template&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Any settings including in the same .pullapprove.yml will override the settings in the template (if they exist).&lt;/p&gt;

&lt;h4 id=&#34;repo-pullapprove-yml:ddee0e7713ac40e6dbb8ff5d03dd1b30&#34;&gt;Repo .pullapprove.yml&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;extends: client-projects
reset_on_push: false  # on this repo, we don&#39;t want to reset approvals on push
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;yaml-template-named-client-projects:ddee0e7713ac40e6dbb8ff5d03dd1b30&#34;&gt;YAML template named &amp;ldquo;client-projects&amp;rdquo;&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;approve_by_comment: true
approve_regex: &#39;^(Approved|:\+1:)&#39;
reset_on_push: true
reviewers:
    required: 1
    members:
        - davegaeddert
        - joelgaeddert
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>YAML templates</title>
      <link>http://docs.pullapprove.com/yaml-templates/</link>
      <pubDate>Thu, 04 Feb 2016 19:59:38 -0600</pubDate>
      
      <guid>http://docs.pullapprove.com/yaml-templates/</guid>
      <description>

&lt;div class=&#34;pro-required callout&#34;&gt;&lt;span class=&#34;fa fa-fw fa-level-up&#34;&gt;&lt;/span&gt; A &lt;a href=&#34;https://pullapprove.com/pricing/&#34;&gt;pro plan is required&lt;/a&gt; to use this feature on private repos.&lt;/div&gt;

&lt;h2 id=&#34;yaml-templates:251301b78c9668a7f5580165a95069ff&#34;&gt;YAML templates&lt;/h2&gt;

&lt;p&gt;Templates are a great way to keep the key preferences for your organization in one location, and easily extend them on a per-repo basis.&lt;/p&gt;

&lt;p&gt;Templates are created and managed on pullapprove.com. &lt;strong&gt;You can find edit  at pullapprove.com/YOUR_ORG&lt;/strong&gt; or by clicking your organization name when browsing repos on pullapprove.com.&lt;/p&gt;

&lt;p&gt;An example template to contain some general rules for your organization.&lt;/p&gt;

&lt;h4 id=&#34;yaml-template-named-client-projects:251301b78c9668a7f5580165a95069ff&#34;&gt;YAML template named &amp;ldquo;client-projects&amp;rdquo;&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;approve_by_comment: true
approve_regex: &#39;^(Approved|:\+1:)&#39;
reset_on_push: true
reviewers:
    required: 1
    members:
        - davegaeddert
        - joelgaeddert
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then for each repo, you simply create a .pullapprove.yml which &lt;code&gt;extends&lt;/code&gt; one of your templates. Any settings in this file will then override the defaults provided by the template.&lt;/p&gt;

&lt;h4 id=&#34;repo-pullapprove-yml:251301b78c9668a7f5580165a95069ff&#34;&gt;Repo .pullapprove.yml&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;extends: client-projects
reset_on_push: false  # on this repo, we don&#39;t want to reset approvals on push
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>reset_on_push</title>
      <link>http://docs.pullapprove.com/yaml/reset_on_push/</link>
      <pubDate>Wed, 30 Dec 2015 20:55:54 -0600</pubDate>
      
      <guid>http://docs.pullapprove.com/yaml/reset_on_push/</guid>
      <description>&lt;p&gt;Whether or not approval statuses get reset to &amp;ldquo;pending&amp;rdquo; when new commits are pushed to a PR. If &lt;code&gt;false&lt;/code&gt;, the PR effectively gets approved once. If &lt;code&gt;true&lt;/code&gt;, any time new commits are pushed, those changes will need to be approved.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>author_approval</title>
      <link>http://docs.pullapprove.com/yaml/author_approval/</link>
      <pubDate>Wed, 30 Dec 2015 20:55:15 -0600</pubDate>
      
      <guid>http://docs.pullapprove.com/yaml/author_approval/</guid>
      <description>

&lt;p&gt;Whether or not approval is required by the author of the pull request.&lt;/p&gt;

&lt;h3 id=&#34;usage:4a46aa2c52d8e7587dcfceb1eb279cd3&#34;&gt;Usage&lt;/h3&gt;

&lt;h5 id=&#34;default:4a46aa2c52d8e7587dcfceb1eb279cd3&#34;&gt;default&lt;/h5&gt;

&lt;p&gt;The author can approve their own pull requests. Their approval counts towards the &lt;code&gt;required&lt;/code&gt; number.&lt;/p&gt;

&lt;h5 id=&#34;ignored:4a46aa2c52d8e7587dcfceb1eb279cd3&#34;&gt;ignored&lt;/h5&gt;

&lt;p&gt;The author can approve their own pull requests, but it does not count towards the number of approvals &lt;code&gt;required&lt;/code&gt;. For example, if 3 reviewers must approve a PR then that means 3 reviewers &lt;em&gt;excluding the author&lt;/em&gt;.&lt;/p&gt;

&lt;h5 id=&#34;required:4a46aa2c52d8e7587dcfceb1eb279cd3&#34;&gt;required&lt;/h5&gt;

&lt;p&gt;The author &lt;strong&gt;must&lt;/strong&gt; approve the pull request. Useful if PRs are opened &amp;ldquo;early and often&amp;rdquo; to facilitate discussion, despite the work being finished.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>reviewers</title>
      <link>http://docs.pullapprove.com/yaml/reviewers/</link>
      <pubDate>Wed, 30 Dec 2015 20:19:51 -0600</pubDate>
      
      <guid>http://docs.pullapprove.com/yaml/reviewers/</guid>
      <description>

&lt;p&gt;This is a dynamic field for defining who reviewers are. See examples below for usage.&lt;/p&gt;

&lt;p&gt;Overview:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;add as many &amp;ldquo;reviewer groups&amp;rdquo; as you like&lt;/li&gt;
&lt;li&gt;for each group:

&lt;ul&gt;
&lt;li&gt;give it a name&lt;/li&gt;
&lt;li&gt;decide how many approvals are required&lt;/li&gt;
&lt;li&gt;choose the members&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;once approval has passed for all groups, the PR is approved&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The structure is simple, yet powerful. Best explained by examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;require approval from 1 frontend dev, 1 backend dev, 1 admin&lt;/li&gt;
&lt;li&gt;require approval from 2 data scientists and 2 data engineers&lt;/li&gt;
&lt;li&gt;require approval from 2 developers, 1 consultant, 2 account managers&lt;/li&gt;
&lt;li&gt;require approval from&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;multiple-reviewer-groups-example:0f435dbce8eb2542a19d6d5ea7ebce44&#34;&gt;Multiple reviewer groups example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;approve_by_comment: true
approve_regex: &#39;^:\+1:&#39;
reject_regex: &#39;^No&#39;
reviewers:
    -
        name: admins
        required: 2
        members:
            - a_user
            - anotheruser
    -
        name: backend_devs
        required: 1
        members:
            - backender_one
        conditions:
            labels:
                - backend-review
            branches:
                - staging
    -
        name: designers
        required: 1
        teams:
            - design
        conditions:
            files:
                - &amp;quot;*.png&amp;quot;
                - &amp;quot;*.jpg&amp;quot;

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;single-reviewer-group-example:0f435dbce8eb2542a19d6d5ea7ebce44&#34;&gt;Single reviewer group example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;approve_by_comment: false
approve_regex: &#39;LGTM&#39;
reviewers:
    required: 1
    members:
        - a_user
        - anotheruser
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;reviewer-group-settings:0f435dbce8eb2542a19d6d5ea7ebce44&#34;&gt;Reviewer group settings&lt;/h3&gt;

&lt;h5 id=&#34;name:0f435dbce8eb2542a19d6d5ea7ebce44&#34;&gt;name&lt;/h5&gt;

&lt;div class=&#34;docs-yaml-values&#34;&gt;Possible values: &lt;span class=&#34;docs-yaml-value&#34;&gt;any string&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;A name to refer to this group of reviewers. Used in status messages. Optional if there is only one reviewer group.&lt;/p&gt;

&lt;hr /&gt;

&lt;h5 id=&#34;required:0f435dbce8eb2542a19d6d5ea7ebce44&#34;&gt;required&lt;/h5&gt;

&lt;div class=&#34;docs-yaml-values&#34;&gt;Possible values: &lt;span class=&#34;docs-yaml-value&#34;&gt;any integer &gt;= -1&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;The number of approvals required out of this group.&lt;/p&gt;

&lt;p&gt;A value of &lt;code&gt;-1&lt;/code&gt; means that approval is required from all members.&lt;/p&gt;

&lt;hr /&gt;

&lt;h5 id=&#34;members:0f435dbce8eb2542a19d6d5ea7ebce44&#34;&gt;members&lt;/h5&gt;

&lt;div class=&#34;docs-yaml-values&#34;&gt;Possible values: &lt;span class=&#34;docs-yaml-value&#34;&gt;array of username strings&lt;/span&gt; &lt;span class=&#34;docs-yaml-value&#34;&gt;&#34;all&#34;&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;The members of this reviewer group, by GitHub username.&lt;/p&gt;

&lt;p&gt;A value of &lt;code&gt;all&lt;/code&gt; means that all repo collaborators are reviewers in this group.&lt;/p&gt;

&lt;p&gt;A reviewer group must use either &lt;code&gt;members&lt;/code&gt; or &lt;code&gt;teams&lt;/code&gt;, but not both.&lt;/p&gt;

&lt;hr /&gt;

&lt;h5 id=&#34;teams:0f435dbce8eb2542a19d6d5ea7ebce44&#34;&gt;teams&lt;/h5&gt;

&lt;div class=&#34;pro-required callout&#34;&gt;&lt;span class=&#34;fa fa-fw fa-level-up&#34;&gt;&lt;/span&gt; A &lt;a href=&#34;https://pullapprove.com/pricing/&#34;&gt;pro plan is required&lt;/a&gt; to use teams on private repos.&lt;/div&gt;

&lt;div class=&#34;docs-yaml-values&#34;&gt;Possible values: &lt;span class=&#34;docs-yaml-value&#34;&gt;array of team slugs&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;The GitHub teams whose members make up this reviewer group. Be sure to use the &lt;strong&gt;slug&lt;/strong&gt; (lowercase, hyphenated) for the team names.&lt;/p&gt;

&lt;p&gt;A reviewer group must use either &lt;code&gt;members&lt;/code&gt; or &lt;code&gt;teams&lt;/code&gt;, but not both.&lt;/p&gt;

&lt;hr /&gt;

&lt;h5 id=&#34;conditions:0f435dbce8eb2542a19d6d5ea7ebce44&#34;&gt;conditions&lt;/h5&gt;

&lt;div class=&#34;pro-required callout&#34;&gt;&lt;span class=&#34;fa fa-fw fa-level-up&#34;&gt;&lt;/span&gt; A &lt;a href=&#34;https://pullapprove.com/pricing/&#34;&gt;pro plan is required&lt;/a&gt; to use conditions on private repos.&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;labels&lt;/p&gt;

&lt;div class=&#34;docs-yaml-values&#34;&gt;Possible values: &lt;span class=&#34;docs-yaml-value&#34;&gt;array of label slugs&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;If any of these labels are present on the PR, this group must review the PR.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;reviewers:
    -
        name: review-by-label
        required: 1
        members:
            - x
            - y
        conditions:
            labels:
                - needs-review
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;files&lt;/p&gt;

&lt;div class=&#34;docs-yaml-values&#34;&gt;Possible values: &lt;span class=&#34;docs-yaml-value&#34;&gt;array of Unix shell-style strings&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;If any of these files were modified in the PR, this group must review the PR.&lt;/p&gt;

&lt;p&gt;File patterns written using Unix shell-style wildcards and matched using &lt;a href=&#34;https://docs.python.org/2/library/fnmatch.html&#34;&gt;Python&amp;rsquo;s &lt;code&gt;fnmatch&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;reviewers:
    -
        name: review-by-files
        required: 1
        members:
            - x
            - y
        conditions:
            files:
                - &amp;quot;*.md&amp;quot;  # review if changed markdown files
                - &amp;quot;docs/*&amp;quot;  # review if edited docs
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;branches&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;docs-yaml-values&#34;&gt;Possible values: &lt;span class=&#34;docs-yaml-value&#34;&gt;array of branch names&lt;/span&gt;&lt;/div&gt;
If PR is merging into one of these branches, this group must review the PR.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;reviewers:
    -
        name: review-by-branches
        required: 1
        members:
            - x
            - y
        conditions:
            branches:
                - staging  # review if merging to staging
                - deploy  # review if merging to deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using the git range syntax, you can specify the base &lt;em&gt;and&lt;/em&gt; head branches for more specific matches.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;branches:
    - deploy...master  # review if merging into &amp;quot;deploy&amp;quot; from &amp;quot;master&amp;quot; (i.e. `base...head`)
    # you can also leave off the base, to target pulls coming from a specific branch name
    - ...staging  # any pulls from staging into another branch need to be reviewed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Branch conditions can also be negated.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;branches:
    - !staging  # nothing merging into staging needs to be reviewed
    # or combined with base...head
    - !staging...master  # merges from master into staging do not need to be reviewed
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>reject_regex</title>
      <link>http://docs.pullapprove.com/yaml/reject_regex/</link>
      <pubDate>Wed, 30 Dec 2015 20:19:46 -0600</pubDate>
      
      <guid>http://docs.pullapprove.com/yaml/reject_regex/</guid>
      <description>

&lt;p&gt;Set a custom regular expression to use when parsing pull request comments for rejection.&lt;/p&gt;

&lt;p&gt;Due to recent changes by GitHub, we now &lt;em&gt;automatically&lt;/em&gt; check for the Unicode equivalents of emojis. For example, if you use &lt;code&gt;:\+1:&lt;/code&gt; in your regex, we&amp;rsquo;ll also check for &lt;code&gt;\U0001f44d&lt;/code&gt;. &lt;strong&gt;You do not have to add Unicode to your regular expressions.&lt;/strong&gt; An added bonus here is that alternative aliases will also be detected automatically, again if you use &lt;code&gt;:\+1:&lt;/code&gt;, we&amp;rsquo;ll also match if a team member uses &lt;code&gt;:thumbsup:&lt;/code&gt;!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;approve_by_comment&lt;/code&gt; must be enabled to use this.&lt;/li&gt;
&lt;li&gt;We recommend starting with &lt;code&gt;^&lt;/code&gt;, to only match strings at the beginning of a line. In our experience this makes approval more intentional, and also avoids issues with comments via email where previous content may be embedded in a blockquote (&lt;code&gt;&amp;gt;&lt;/code&gt;) that could otherwise trigger mistaken approval.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;examples:9572bb22eda4a1bea1e12f87c38cebcd&#34;&gt;Examples&lt;/h4&gt;

&lt;p&gt;Multiple triggers&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;reject_regex: &#39;^(Rejected|:-1:)&#39;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>approve_regex</title>
      <link>http://docs.pullapprove.com/yaml/approve_regex/</link>
      <pubDate>Wed, 30 Dec 2015 20:19:42 -0600</pubDate>
      
      <guid>http://docs.pullapprove.com/yaml/approve_regex/</guid>
      <description>

&lt;p&gt;Set a custom regular expression to use when parsing pull request comments for approval.&lt;/p&gt;

&lt;p&gt;Due to recent changes by GitHub, we now &lt;em&gt;automatically&lt;/em&gt; check for the Unicode equivalents of emojis. For example, if you use &lt;code&gt;:\+1:&lt;/code&gt; in your regex, we&amp;rsquo;ll also check for &lt;code&gt;\U0001f44d&lt;/code&gt;. &lt;strong&gt;You do not have to add Unicode to your regular expressions.&lt;/strong&gt; An added bonus here is that alternative aliases will also be detected automatically, again if you use &lt;code&gt;:\+1:&lt;/code&gt;, we&amp;rsquo;ll also match if a team member uses &lt;code&gt;:thumbsup:&lt;/code&gt;!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;approve_by_comment&lt;/code&gt; must be enabled to use this.&lt;/li&gt;
&lt;li&gt;We recommend starting with &lt;code&gt;^&lt;/code&gt;, to only match strings at the beginning of a line. In our experience this makes approval more intentional, and also avoids issues with comments via email where previous content may be embedded in a blockquote (&lt;code&gt;&amp;gt;&lt;/code&gt;) that could otherwise trigger mistaken approval.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;examples:08effbece3877590069102b65bc50180&#34;&gt;Examples&lt;/h4&gt;

&lt;p&gt;Multiple triggers&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;approve_regex: &#39;^(Approved|:shipit:|:\+1:)&#39;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>approve_by_comment</title>
      <link>http://docs.pullapprove.com/yaml/approve_by_comment/</link>
      <pubDate>Wed, 30 Dec 2015 19:59:05 -0600</pubDate>
      
      <guid>http://docs.pullapprove.com/yaml/approve_by_comment/</guid>
      <description>&lt;p&gt;Enable parsing of pull request comments on github.com to trigger approval status.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>YAML overview</title>
      <link>http://docs.pullapprove.com/yaml/</link>
      <pubDate>Fri, 11 Dec 2015 23:39:09 -0600</pubDate>
      
      <guid>http://docs.pullapprove.com/yaml/</guid>
      <description>

&lt;h2 id=&#34;yaml-settings-configuration:26cdd1dbcdcbaf3edf773c725e4fa9fb&#34;&gt;YAML settings configuration&lt;/h2&gt;

&lt;p&gt;To enable, simply place a &lt;code&gt;.pullapprove.yml&lt;/code&gt; file in the root of your repo.&lt;/p&gt;

&lt;p&gt;Be sure to check the settings page of your repo in &lt;a href=&#34;https://pullapprove.com&#34;&gt;https://pullapprove.com&lt;/a&gt;, it will tell you if there is an error in your .pullapprove.yml file.&lt;/p&gt;

&lt;p&gt;Read details about each YAML setting on their respective pages, available in the menu on the left side of the page.&lt;/p&gt;

&lt;h4 id=&#34;example-pullapprove-yml:26cdd1dbcdcbaf3edf773c725e4fa9fb&#34;&gt;Example .pullapprove.yml&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;approve_by_comment: true
approve_regex: &#39;^:\+1:&#39;
reject_regex: &#39;^No&#39;
reject_value: -1
reset_on_push: true
author_approval: ignored
reviewers:
    -
        name: admins
        required: 2
        members:
            - a_user
            - anotheruser
        conditions:
            branches:
                - master  # only need to approve if merging to master
    -
        name: backend_devs
        required: 1
        members:
            - backender_one
    -
        name: designers
        required: 1
        members:
            - designerA
            - designerB
        conditions:
            labels:
                - design-review
            files:
                - &amp;quot;*.png&amp;quot;
                - &amp;quot;*.jpg&amp;quot;

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>always_pending</title>
      <link>http://docs.pullapprove.com/yaml/always_pending/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.pullapprove.com/yaml/always_pending/</guid>
      <description>&lt;p&gt;A pull request matching any of these conditions will always have a &amp;ldquo;pending&amp;rdquo; status. Extremely useful for &amp;ldquo;work in progress&amp;rdquo; PR&amp;rsquo;s.&lt;/p&gt;

&lt;p&gt;PR&amp;rsquo;s can be matched by either their title (with a regex) or labels. You can use the &lt;code&gt;explanation&lt;/code&gt; field if you want to write your own status message.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;always_pending:
    title_regex: &#39;(WIP|wip)&#39;
    labels:
        - wip
    # custom message that will be used for the GitHub status
    explanation: &#39;This PR is a work in progress...&#39;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>always_rejected</title>
      <link>http://docs.pullapprove.com/yaml/always_rejected/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.pullapprove.com/yaml/always_rejected/</guid>
      <description>&lt;p&gt;A pull request matching any of these conditions will always have a &amp;ldquo;rejected&amp;rdquo; status.&lt;/p&gt;

&lt;p&gt;PR&amp;rsquo;s can be matched by either their title (with a regex) or labels. You can use the &lt;code&gt;explanation&lt;/code&gt; field if you want to write your own status message.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;always_rejected:
    title_regex: &#39;(WIP|wip)&#39;
    labels:
        - wip
    # custom message that will be used for the GitHub status
    explanation: &#39;This PR is a work in progress...&#39;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>reject_value</title>
      <link>http://docs.pullapprove.com/yaml/reject_value/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.pullapprove.com/yaml/reject_value/</guid>
      <description>

&lt;p&gt;Set a custom value for what a rejection is worth. Essentially allows rejections to cancel out approvals &amp;ndash; if set to -1, then every rejection would require 1 additional approval. If set to -2, then 1 rejection would require 2 more approvals.&lt;/p&gt;

&lt;h4 id=&#34;examples:3fe7e7e541dbd0a8b4dd7c6cbb519c62&#34;&gt;Examples&lt;/h4&gt;

&lt;p&gt;Rejections cancel out approvals 1-for-1&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;reject_value: -1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A single rejection rejects the PR (use any value &amp;gt; the number of reviewers you have)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;reject_value: -99
reviewers:
    required: 2
    members:
        - userone
        - usertwo
        - userthree
        - userfour
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>reset_on_reopened</title>
      <link>http://docs.pullapprove.com/yaml/reset_on_reopened/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.pullapprove.com/yaml/reset_on_reopened/</guid>
      <description>&lt;p&gt;Whether or not approval statuses get reset to &amp;ldquo;pending&amp;rdquo; when a pull request is re-opened.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>